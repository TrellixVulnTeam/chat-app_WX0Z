{"version":3,"sources":["./src/app/socket.service.ts","./src/environments/environment.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\n\n@Injectable()\nexport class SocketService {\n    private socket: WebSocket;\n    private listener: EventEmitter<any> = new EventEmitter();\n\n    public constructor() {\n        this.socket = new WebSocket(\"ws://localhost:12345/ws\");\n        this.socket.onopen = event => {\n            this.listener.emit({\"type\": \"open\", \"data\": event});\n        }\n        this.socket.onclose = event => {\n            this.listener.emit({\"type\": \"close\", \"data\": event});\n        }\n        this.socket.onmessage = event => {\n            this.listener.emit({\"type\": \"message\", \"data\": JSON.parse(event.data)});\n        }\n    }\n\n    public send(data: string) {\n        this.socket.send(data);\n    }\n\n    public close() {\n        this.socket.close();\n    }\n\n    public getEventListener() {\n        return this.listener;\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","<ul id=\"messages\">\n    <li *ngFor=\"let message of messages\">\n        <span [innerHTML]=\"isSystemMessage(message)\"></span>\n    </li>\n</ul>\n<form action=\"\">\n    <input [(ngModel)]=\"chatBox\" [ngModelOptions]=\"{standalone: true}\" autocomplete=\"off\" />\n    <button (click)=\"send()\">Send</button>\n</form>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { SocketService } from \"./socket.service\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n\n    public messages: Array<any>;\n    public chatBox: string;\n\n    public constructor(private socket: SocketService) {\n        this.messages = [];\n        this.chatBox = \"\";\n    }\n\n    public ngOnInit() {\n        this.socket.getEventListener().subscribe(event => {\n            if(event.type == \"message\") {\n                let data = event.data.content;\n                if(event.data.sender) {\n                    data = event.data.sender + \": \" + data;\n                }\n                this.messages.push(data);\n            }\n            if(event.type == \"close\") {\n                this.messages.push(\"/The socket connection has been closed\");\n            }\n            if(event.type == \"open\") {\n                this.messages.push(\"/The socket connection has been established\");\n            }\n        });\n    }\n\n    public ngOnDestroy() {\n        this.socket.close();\n    }\n\n    public send() {\n        if(this.chatBox) {\n            this.socket.send(this.chatBox);\n            this.chatBox = \"\";\n        }\n    }\n\n    public isSystemMessage(message: string) {\n        return message.startsWith(\"/\") ? \"<strong>\" + message.substring(1) + \"</strong>\" : message;\n    }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule }   from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { SocketService } from \"./socket.service\";\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        HttpClientModule\n    ],\n    declarations: [\n        AppComponent\n    ],\n    providers: [SocketService],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}